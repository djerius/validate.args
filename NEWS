1.5.9: 2017-07-18T12:07:55-0400

  [BUG FIX]

    * posnum, zposnum, posint, and zposint were not exported into the
      validate.args namespace

  [BUILD]

    * now uses non-recursive make files

1.5.8:	2016-09-06T15:36:00-04:00

  [BUG FIX]

    * error messages for "multiple" specifications withlimits on the
      number of elements were output incorrectly

  [BUILD]

    * luassert >= 1.7.7 now required (provides string matching assertions)

1.5.7:	2015-07-01T10:54:17-04:00

  [ENHANCEMENTS]

    * First cut at Lua 5.2+ compatibility
    * switch testing framework from lunatest to busted
    * standalone dev infrastructure

1.5.6:	2012-02-10T11:40:24-05:00

  [BUG FIX]

    * fix fatal error if the vtable ordered option was set and a
      specification was a function.

1.5.5:	2012-01-25T16:37:29-05:00

  [BUG FIX]

    * the success return value from mutating validation specification
      functions was ignored.

  [ENHANCEMENT]

    * catch-all specification functions may now specify an error
      message

1.5.4:	2012-01-13T10:07:19-05:00

  [BUG FIX]

    * remove debug code left in source which caused failure

1.5.3:	2011-12-28T14:42:11-05:00

  [ENHANCEMENTS]

    * added new validation options, "before", and "after" to provide
      access to the complete data before and after validation

  [DEPRECATIONS]

    * the precoll and postcoll specification options are now named
      "before" and "after"; the old names still work for now.

1.5.2:	2011-09-23T16:55:07-04:00

  [ENHANCEMENTS]

    * add argument validation to validate.inplace:new()

1.5.1:	2011-09-22T17:56:55-04:00

  [ENHANCEMENTS]

    * The validate.args functions posnum, zposnum, posint, and zposint
      now return an error message upon error, making them more
      compatible with Lua's assert() function.

1.5.0:	2011-08-25T17:05:35-04:00

  [API CHANGE]

    The default behavior was to allow nil positional arguments.  This
    is inconsistent with the behavior for table arguments (e.g.,
    optional defaults to false), and caused confusion.

    The new default behavior is that positional arguments may not be
    nil.  Use the allow_nil specification to indicate that nil values
    are permitted.  The not_nil specification is now redundant and
    deprecated.


1.4.0:	2011-08-20T00:46:59-04:00

  [BUG FIX]

    * if a vtable element was scanned for defaults and any of the
      nested specifications were required, an error was thrown.  the
      new default_is_nil attribute stops the scans.

  [ENHANCEMENTS]

    * named arguments may now be processed in order (where order is
      specified in the validation specification


1.3.1:	2011-07-24T18:09:20-04:00

  [ENHANCEMENTS]

    * new catch all specifications

    * user data can now be passed to callback functions

    * simple validation functions are now exposed to the caller

1.3.0:	2011-07-12T17:09:29-04:00

  [BUG FIXES]

    * lots of bugs in inlined types fixed

    * renaming of positional elements in nested tables didn't work

    * stop duplicate validation of validation specs

  [ENHANCEMENTS]

    * new specification option: named, allows per element renaming of
      positional data elements

1.2.5 :	2011-07-11T11:43:54-04:00

  [ENHANCEMENTS]

    * new "multiple" parameter, indicating that an element is actually
      a table of things to be validated against the same specification

    * "type" parameter now accepts "inlined" validation
      specifications.

1.2.4 :	2011-07-07T23:03:50-04:00

  [ENHANCEMENTS]

    * vfunc callback is passed as an extra argument a table with
      additional info

    * user provided functions may be called prior to and after the
      validation process for each argument in the validation
      specification

    * new module validate.inplace; provides validation upon assignment
      of an element in a data structure

1.2.3 :	2011-06-07T17:23:03-04:00

  [BUG FIX]

    * default values for vtable arguments are now properly populated

1.2.2 :	2011-06-03T13:16:24-04:00

  [BUG FIX]

    * named positional arguments were returned as nil if opts.named =
      false

1.2.1 :	2011-05-31T18:04:23-04:00

  [OTHER]

    * minor documentation fixes

1.2.0 :	2011-05-31T16:55:03-04:00

  [API CHANGE]

    * validate_opts: options which are now set reflect the *current*
      values as set by opts(), not the default values.  the
      baseOptions option is no longer supported.  Use the new
      object-oriented interface to duplicate the old functionality

  [ENHANCEMENTS]

    * validate.args now provides an object-oriented API as well as a
      procedural API.  This makes it easier to create isolated
      validation schemes.


1.1.0 :	2011-05-25T17:22:44-04:00

  [API CHANGE]

    * type check functions may now return an error message upon
      failure. older code which simply returns the passed argument as
      the second return value will see that argument output in the
      error message.  See the updated docs for more information.

1.0.1 :	2011-05-13T12:11:16-04:00

  [ENHANCEMENTS]

    * default value may now be a function which returns the value

  [OTHER]

    * documentation improvements

1.0.0 :	2010-10-15T10:53:28-04:00

    * initial public release


